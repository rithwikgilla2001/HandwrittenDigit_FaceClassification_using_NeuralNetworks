# -*- coding: utf-8 -*-
"""ML Project-2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OL9FIt1Xuv_VnUxQz8IEQlx06tVXNvwP

# nnScript
"""

import numpy as np
from scipy.optimize import minimize
from scipy.io import loadmat
from math import sqrt
import pickle
import time

def initializeWeights(n_in, n_out):
    """
    # initializeWeights return the random weights for Neural Network given the
    # number of node in the input layer and output layer

    # Input:
    # n_in: number of nodes of the input layer
    # n_out: number of nodes of the output layer

    # Output:
    # W: matrix of random initial weights with size (n_out x (n_in + 1))"""

    epsilon = sqrt(6) / sqrt(n_in + n_out + 1)
    W = (np.random.rand(n_out, n_in + 1) * 2 * epsilon) - epsilon
    return W

def sigmoid(z):
    """# Notice that z can be a scalar, a vector or a matrix
    # return the sigmoid of input z"""
    sig_z = (1+np.exp(-z))
    return 1/sig_z

def preprocess():
    """ Input:
     Although this function doesn't have any input, you are required to load
     the MNIST data set from file 'mnist_all.mat'.

     Output:
     train_data: matrix of training set. Each row of train_data contains
       feature vector of a image
     train_label: vector of label corresponding to each image in the training
       set
     validation_data: matrix of training set. Each row of validation_data
       contains feature vector of a image
     validation_label: vector of label corresponding to each image in the
       training set
     test_data: matrix of training set. Each row of test_data contains
       feature vector of a image
     test_label: vector of label corresponding to each image in the testing
       set

     Some suggestions for preprocessing step:
     - feature selection"""

    mat = loadmat('mnist_all.mat')  # loads the MAT object as a Dictionary

    # Pick a reasonable size for validation data

    # ------------Initialize preprocess arrays----------------------#
    train_preprocess = np.zeros(shape=(50000, 784))
    validation_preprocess = np.zeros(shape=(10000, 784))
    test_preprocess = np.zeros(shape=(10000, 784))
    train_label_preprocess = np.zeros(shape=(50000,))
    validation_label_preprocess = np.zeros(shape=(10000,))
    test_label_preprocess = np.zeros(shape=(10000,))
    # ------------Initialize flag variables----------------------#
    train_len = 0
    validation_len = 0
    test_len = 0
    train_label_len = 0
    validation_label_len = 0
    # ------------Start to split the data set into 6 arrays-----------#
    for key in mat:
        # -----------when the set is training set--------------------#
        if "train" in key:
            label = key[-1]  # record the corresponding label
            tup = mat.get(key)
            sap = range(tup.shape[0])
            tup_perm = np.random.permutation(sap)
            tup_len = len(tup)  # get the length of current training set
            tag_len = tup_len - 1000  # defines the number of examples which will be added into the training set

            # ---------------------adding data to training set-------------------------#
            train_preprocess[train_len:train_len + tag_len] = tup[tup_perm[1000:], :]
            train_len += tag_len

            train_label_preprocess[train_label_len:train_label_len + tag_len] = label
            train_label_len += tag_len

            # ---------------------adding data to validation set-------------------------#
            validation_preprocess[validation_len:validation_len + 1000] = tup[tup_perm[0:1000], :]
            validation_len += 1000

            validation_label_preprocess[validation_label_len:validation_label_len + 1000] = label
            validation_label_len += 1000

            # ---------------------adding data to test set-------------------------#
        elif "test" in key:
            label = key[-1]
            tup = mat.get(key)
            sap = range(tup.shape[0])
            tup_perm = np.random.permutation(sap)
            tup_len = len(tup)
            test_label_preprocess[test_len:test_len + tup_len] = label
            test_preprocess[test_len:test_len + tup_len] = tup[tup_perm]
            test_len += tup_len
            # ---------------------Shuffle,double and normalize-------------------------#
    train_size = range(train_preprocess.shape[0])
    train_perm = np.random.permutation(train_size)
    train_data = train_preprocess[train_perm]
    train_data = np.double(train_data)
    train_data = train_data / 255.0
    train_label = train_label_preprocess[train_perm]

    validation_size = range(validation_preprocess.shape[0])
    vali_perm = np.random.permutation(validation_size)
    validation_data = validation_preprocess[vali_perm]
    validation_data = np.double(validation_data)
    validation_data = validation_data / 255.0
    validation_label = validation_label_preprocess[vali_perm]

    test_size = range(test_preprocess.shape[0])
    test_perm = np.random.permutation(test_size)
    test_data = test_preprocess[test_perm]
    test_data = np.double(test_data)
    test_data = test_data / 255.0
    test_label = test_label_preprocess[test_perm]

    # Feature selection
    # Your code here.
    # global feat_select
    feat_var = np.var(train_data, axis=0)

    var_cond = feat_var > 0


    feat_select = np.where(var_cond)[0] + 1
    print("The Attributes/Features selected:", feat_select)

    test_data = test_data[:, var_cond]
    train_data = train_data[:, var_cond]
    validation_data = validation_data[:, var_cond]

    print('preprocess done')

    return train_data, train_label, validation_data, validation_label, test_data, test_label
    # ,feat_select

# Commented out IPython magic to ensure Python compatibility.
def nnObjFunction(params, *args):
    """% nnObjFunction computes the value of objective function (negative log
#     %   likelihood error function with regularization) given the parameters
#     %   of Neural Networks, thetraining data, their corresponding training
#     %   labels and lambda - regularization hyper-parameter.

#     % Input:
#     % params: vector of weights of 2 matrices w1 (weights of connections from
#     %     input layer to hidden layer) and w2 (weights of connections from
#     %     hidden layer to output layer) where all of the weights are contained
#     %     in a single vector.
#     % n_input: number of node in input layer (not include the bias node)
#     % n_hidden: number of node in hidden layer (not include the bias node)
#     % n_class: number of node in output layer (number of classes in
#     %     classification problem
#     % training_data: matrix of training data. Each row of this matrix
#     %     represents the feature vector of a particular image
#     % training_label: the vector of truth label of training images. Each entry
#     %     in the vector represents the truth label of its corresponding image.
#     % lambda: regularization hyper-parameter. This value is used for fixing the
#     %     overfitting problem.

#     % Output:
#     % obj_val: a scalar value representing value of error function
#     % obj_grad: a SINGLE vector of gradient value of error function
#     % NOTE: how to compute obj_grad
#     % Use backpropagation algorithm to compute the gradient of error function
#     % for each weights in weight matrices.

#     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#     % reshape 'params' vector into 2 matrices of weight w1 and w2
#     % w1: matrix of weights of connections from input layer to hidden layers.
#     %     w1(i, j) represents the weight of connection from unit j in input
#     %     layer to unit i in hidden layer.
#     % w2: matrix of weights of connections from hidden layer to output layers.
#     %     w2(i, j) represents the weight of connection from unit j in hidden
#     %     layer to unit i in output layer."""

    n_input, n_hidden, n_class, training_data, training_label, lambdaval = args

    w1 = params[0:n_hidden * (n_input + 1)].reshape((n_hidden, (n_input + 1)))
    w2 = params[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))
    obj_val = 0

    # Your code here
    onehot_tr_label = np.zeros((training_label.size, n_class))
    onehot_tr_label[np.arange(training_label.size), training_label.astype(int)] = 1

    # 1. Feedforward Propagation
    training_data = np.hstack((training_data, np.ones((training_data.shape[0], 1))))
    l1 = np.dot(training_data, w1.T)
    z1 = sigmoid(l1)

    z1 = np.hstack((z1, np.ones((z1.shape[0], 1))))

    l2 = np.dot(z1, w2.T)
    out_l = sigmoid(l2)

    # 2. Error Function Calculation (Negative Log-Likelihood with Regularization)
    log_likelihood = onehot_tr_label * np.log(out_l) + (1 - onehot_tr_label) * np.log(1 - out_l)
    error = -np.sum(log_likelihood) / training_data.shape[0]

    reg_t_1 = np.sum(np.square(w1[:, :-1]))
    reg_t_2 = np.sum(np.square(w2[:, :-1]))
    regularization = (lambdaval / (2 * training_data.shape[0])) * (reg_t_1 + reg_t_2)


    tot_obj_val = error + regularization


    # 3. Backpropagation to Calculate Gradients
    out_del = out_l - onehot_tr_label

    hid_del = np.dot(out_del, w2[:, :-1]) * z1[:, :-1] * (1 - z1[:, :-1])


    grad_t_1 = np.dot(hid_del.T, training_data) / training_data.shape[0]
    grad_t_2 = np.dot(out_del.T, z1) / training_data.shape[0]


    grad_t_1[:, :-1] += (lambdaval / training_data.shape[0]) * w1[:, :-1]
    grad_t_2[:, :-1] += (lambdaval / training_data.shape[0]) * w2[:, :-1]

    obj_grad = np.concatenate((grad_t_1.flatten(), grad_t_2.flatten()),0)

    return (tot_obj_val, obj_grad)

# Commented out IPython magic to ensure Python compatibility.
def nnPredict(w1, w2, data):
    """% nnPredict predicts the label of data given the parameter w1, w2 of Neural
#     % Network.

#     % Input:
#     % w1: matrix of weights of connections from input layer to hidden layers.
#     %     w1(i, j) represents the weight of connection from unit i in input
#     %     layer to unit j in hidden layer.
#     % w2: matrix of weights of connections from hidden layer to output layers.
#     %     w2(i, j) represents the weight of connection from unit i in input
#     %     layer to unit j in hidden layer.
#     % data: matrix of data. Each row of this matrix represents the feature
#     %       vector of a particular image

#     % Output:
#     % label: a column vector of predicted labels"""

    labels = np.array([])
    # Your code here
    data = np.concatenate((data, np.ones((data.shape[0], 1))), axis=1)

    inp = np.dot(data, w1.T)
    inp_1 = sigmoid(inp)

    inp_1 = np.append(inp_1, np.ones((inp_1.shape[0], 1)), axis=1)


    out_l = np.dot(inp_1, w2.T)
    out_fin = sigmoid(out_l)

    labels = np.argmax(out_fin, axis=1)

    return labels

"""**************Neural Network Script Starts here********************************"""

train_data, train_label, validation_data, validation_label, test_data, test_label = preprocess()
# train_data, train_label, validation_data, validation_label, test_data, test_label,feat_select = preprocess()

#  Train Neural Network

# set the number of nodes in input unit (not including bias unit)
n_input = train_data.shape[1]

# set the number of nodes in hidden unit (not including bias unit)
n_hidden = 20

# set the number of nodes in output unit
n_class = 10

# initialize the weights into some random matrices
initial_w1 = initializeWeights(n_input, n_hidden)
initial_w2 = initializeWeights(n_hidden, n_class)

# unroll 2 weight matrices into single column vector
initialWeights = np.concatenate((initial_w1.flatten(), initial_w2.flatten()), 0)

# set the regularization hyper-parameter
lambdaval = 15

args = (n_input, n_hidden, n_class, train_data, train_label, lambdaval)

# Train Neural Network using fmin_cg or minimize from scipy,optimize module. Check documentation for a working example

opts = {'maxiter': 50}  # Preferred value.


start_time = time.time()


nn_params = minimize(nnObjFunction, initialWeights, jac=True, args=args, method='CG', options=opts)

# In Case you want to use fmin_cg, you may have to split the nnObjectFunction to two functions nnObjFunctionVal
# and nnObjGradient. Check documentation for this function before you proceed.
# nn_params, cost = fmin_cg(nnObjFunctionVal, initialWeights, nnObjGradient,args = args, maxiter = 50)

end_time = time.time()
training_duration = end_time - start_time
print(f"\nTraining Time: {training_duration:.2f} seconds")




# Reshape nnParams from 1D vector into w1 and w2 matrices
w1 = nn_params.x[0:n_hidden * (n_input + 1)].reshape((n_hidden, (n_input + 1)))
w2 = nn_params.x[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))

# Test the computed parameters

predicted_label = nnPredict(w1, w2, train_data)

# find the accuracy on Training Dataset

print('\n Training set Accuracy:' + str(100 * np.mean((predicted_label == train_label).astype(float))) + '%')

predicted_label = nnPredict(w1, w2, validation_data)

# find the accuracy on Validation Dataset

print('\n Validation set Accuracy:' + str(100 * np.mean((predicted_label == validation_label).astype(float))) + '%')

predicted_label = nnPredict(w1, w2, test_data)

# find the accuracy on Validation Dataset

print('\n Test set Accuracy:' + str(100 * np.mean((predicted_label == test_label).astype(float))) + '%')

# import pickle

# # Assume you have the following variables ready:
# # selected_features = [...]  # List of selected features from your feature selection step
# # n_hidden = ...             # Optimal number of hidden units in hidden layer
# # w1 = ...                   # Weight matrix for the first layer (input to hidden)
# # w2 = ...                   # Weight matrix for the second layer (hidden to output)
# # lambda_optimal = ...       # Optimal regularization coefficient λ

# # Dictionary to save in the pickle file
# params = {
#     'selected_features': feat_select,
#     'n_hidden': n_hidden,
#     'w1': w1,
#     'w2': w2,
#     'lambda_optimal': lambdaval
# }

# # Save to a pickle file
# with open('params.pickle', 'wb') as f:
#     pickle.dump(params, f)

# print("Parameters saved in 'params.pickle'")

"""# FacennScript"""

'''
Comparing single layer MLP with deep MLP (using TensorFlow)
'''

import numpy as np
import pickle
import time

# Do not change this
def initializeWeights(n_in,n_out):
    """
    # initializeWeights return the random weights for Neural Network given the
    # number of node in the input layer and output layer

    # Input:
    # n_in: number of nodes of the input layer
    # n_out: number of nodes of the output layer

    # Output:
    # W: matrix of random initial weights with size (n_out x (n_in + 1))"""
    epsilon = sqrt(6) / sqrt(n_in + n_out + 1);
    W = (np.random.rand(n_out, n_in + 1)*2* epsilon) - epsilon;
    return W

# Replace this with your sigmoid implementation
def sigmoid(z):
    """# Notice that z can be a scalar, a vector or a matrix
    # return the sigmoid of input z"""
    sig_z = (1+np.exp(-z))
    return 1/sig_z

# Replace this with your nnObjFunction implementation
def nnObjFunction(params, *args):

    n_input, n_hidden, n_class, training_data, training_label, lambdaval = args

    w1 = params[0:n_hidden * (n_input + 1)].reshape((n_hidden, (n_input + 1)))
    w2 = params[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))
    obj_val = 0

    # Your code here
    onehot_tr_label = np.zeros((training_label.size, n_class))

    onehot_tr_label[np.arange(training_label.size), training_label.astype(int)] = 1

    # 1. Feedforward Propagation

    training_data = np.hstack((training_data, np.ones((training_data.shape[0], 1))))


    l1 = np.dot(training_data, w1.T)
    z1 = sigmoid(l1)


    z1 = np.hstack((z1, np.ones((z1.shape[0], 1))))


    l2 = np.dot(z1, w2.T)
    out_l = sigmoid(l2)

    # 2. Error Function Calculation (Negative Log-Likelihood with Regularization)



    log_likelihood = onehot_tr_label * np.log(out_l) + (1 - onehot_tr_label) * np.log(1 - out_l)
    error = -np.sum(log_likelihood) / training_data.shape[0]


    reg_t_1 = np.sum(np.square(w1[:, :-1]))
    reg_t_2 = np.sum(np.square(w2[:, :-1]))
    regularization = (lambdaval / (2 * training_data.shape[0])) * (reg_t_1 + reg_t_2)


    tot_obj_val = error + regularization


    # 3. Backpropagation to Calculate Gradients

    out_del = out_l - onehot_tr_label


    hid_del = np.dot(out_del, w2[:, :-1]) * z1[:, :-1] * (1 - z1[:, :-1])


    grad_t_1 = np.dot(hid_del.T, training_data) / training_data.shape[0]
    grad_t_2 = np.dot(out_del.T, z1) / training_data.shape[0]


    grad_t_1[:, :-1] += (lambdaval / training_data.shape[0]) * w1[:, :-1]
    grad_t_2[:, :-1] += (lambdaval / training_data.shape[0]) * w2[:, :-1]

    obj_grad = np.concatenate((grad_t_1.flatten(), grad_t_2.flatten()),0)

    return (tot_obj_val, obj_grad)

# Replace this with your nnPredict implementation

def nnPredict(w1, w2, data):

    labels = np.array([])
    # Your code here

    data = np.concatenate((data, np.ones((data.shape[0], 1))), axis=1)


    inp = np.dot(data, w1.T)
    inp_1 = sigmoid(inp)


    inp_1 = np.append(inp_1, np.ones((inp_1.shape[0], 1)), axis=1)


    out_l = np.dot(inp_1, w2.T)
    out_fin = sigmoid(out_l)


    labels = np.argmax(out_fin, axis=1)

    return labels

# Do not change this
def preprocess():
    pickle_obj = pickle.load(file=open('face_all.pickle', 'rb'))
    features = pickle_obj['Features']
    labels = pickle_obj['Labels']
    train_x = features[0:21100] / 255
    valid_x = features[21100:23765] / 255
    test_x = features[23765:] / 255

    labels = labels[0]
    train_y = labels[0:21100]
    valid_y = labels[21100:23765]
    test_y = labels[23765:]
    return train_x, train_y, valid_x, valid_y, test_x, test_y

"""**************Neural Network Script Starts here********************************"""
train_data, train_label, validation_data, validation_label, test_data, test_label = preprocess()
#  Train Neural Network
# set the number of nodes in input unit (not including bias unit)
n_input = train_data.shape[1]
# set the number of nodes in hidden unit (not including bias unit)
n_hidden = 256
# n_hidden = 20
# set the number of nodes in output unit
n_class = 2

# initialize the weights into some random matrices
initial_w1 = initializeWeights(n_input, n_hidden);
initial_w2 = initializeWeights(n_hidden, n_class);
# unroll 2 weight matrices into single column vector
initialWeights = np.concatenate((initial_w1.flatten(), initial_w2.flatten()),0)
# set the regularization hyper-parameter
lambdaval = 10;
args = (n_input, n_hidden, n_class, train_data, train_label, lambdaval)

#Train Neural Network using fmin_cg or minimize from scipy,optimize module. Check documentation for a working example
opts = {'maxiter' :50}    # Preferred value.

start_time = time.time()

nn_params = minimize(nnObjFunction, initialWeights, jac=True, args=args,method='CG', options=opts)

end_time = time.time()

# Calculate the training time
training_time = end_time - start_time
print(f'\n Training time: {training_time:.2f} seconds')


params = nn_params.get('x')
#Reshape nnParams from 1D vector into w1 and w2 matrices
w1 = params[0:n_hidden * (n_input + 1)].reshape( (n_hidden, (n_input + 1)))
w2 = params[(n_hidden * (n_input + 1)):].reshape((n_class, (n_hidden + 1)))

#Test the computed parameters
predicted_label = nnPredict(w1,w2,train_data)
#find the accuracy on Training Dataset
print('\n Training set Accuracy:' + str(100*np.mean((predicted_label == train_label).astype(float))) + '%')
predicted_label = nnPredict(w1,w2,validation_data)
#find the accuracy on Validation Dataset
print('\n Validation set Accuracy:' + str(100*np.mean((predicted_label == validation_label).astype(float))) + '%')
predicted_label = nnPredict(w1,w2,test_data)
#find the accuracy on Validation Dataset
print('\n Test set Accuracy:' +  str(100*np.mean((predicted_label == test_label).astype(float))) + '%')

"""# DeepnnScript"""

import tensorflow as tf
import numpy as np
import pickle

# Create model
# Add more hidden layers to create deeper networks
# Remember to connect the final hidden layer to the out_layer
def create_multilayer_perceptron():
    # Network Parameters
    n_hidden_1 = 256  # 1st layer number of features
    n_hidden_2 = 256  # 2nd layer number of features
    n_input = 2376  # data input
    n_classes = 2

    # Store layers weight & bias
    weights = {
        'h1': tf.Variable(tf.random.normal([n_input, n_hidden_1], dtype=tf.float32)),
        'h2': tf.Variable(tf.random.normal([n_hidden_1, n_hidden_2], dtype=tf.float32)),
        'out': tf.Variable(tf.random.normal([n_hidden_2, n_classes], dtype=tf.float32))
    }
    biases = {
        'b1': tf.Variable(tf.random.normal([n_hidden_1], dtype=tf.float32)),
        'b2': tf.Variable(tf.random.normal([n_hidden_2], dtype=tf.float32)),
        'out': tf.Variable(tf.random.normal([n_classes], dtype=tf.float32))
    }

    def model(x):
        x = tf.cast(x, tf.float32)  # Ensure input is float32
        # Hidden layer with RELU activation
        layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
        layer_1 = tf.nn.relu(layer_1)
        # Hidden layer with RELU activation
        layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
        layer_2 = tf.nn.relu(layer_2)
        # Output layer with linear activation
        out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
        return out_layer

    # Combine weights and biases as trainable variables
    trainable_variables = list(weights.values()) + list(biases.values())

    return model, trainable_variables

# Do not change this
def preprocess():
    pickle_obj = pickle.load(open('face_all.pickle', 'rb'))
    features = pickle_obj['Features'].astype(np.float32)  # Convert to float32
    labels = pickle_obj['Labels']
    train_x = features[0:21100] / 255
    valid_x = features[21100:23765] / 255
    test_x = features[23765:] / 255

    labels = labels.T
    train_y = np.zeros(shape=(21100, 2), dtype=np.float32)
    train_l = labels[0:21100]
    valid_y = np.zeros(shape=(2665, 2), dtype=np.float32)
    valid_l = labels[21100:23765]
    test_y = np.zeros(shape=(2642, 2), dtype=np.float32)
    test_l = labels[23765:]
    for i in range(train_y.shape[0]):
        train_y[i, train_l[i]] = 1
    for i in range(valid_y.shape[0]):
        valid_y[i, valid_l[i]] = 1
    for i in range(test_y.shape[0]):
        test_y[i, test_l[i]] = 1

    return train_x, train_y, valid_x, valid_y, test_x, test_y

# Parameters
learning_rate = 0.0001
training_epochs = 100
batch_size = 100

# Construct model
model, trainable_variables = create_multilayer_perceptron()

# Load data
train_features, train_labels, valid_features, valid_labels, test_features, test_labels = preprocess()

# Define loss and optimizer
optimizer = tf.optimizers.Adam(learning_rate=learning_rate)

# Training
for epoch in range(training_epochs):
    avg_cost = 0.
    total_batch = int(train_features.shape[0] / batch_size)
    # Loop over all batches
    for i in range(total_batch):
        batch_x = train_features[i * batch_size: (i + 1) * batch_size]
        batch_y = train_labels[i * batch_size: (i + 1) * batch_size]

        # Gradient descent with GradientTape
        with tf.GradientTape() as tape:
            logits = model(batch_x)
            cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=batch_y))

        grads = tape.gradient(cost, trainable_variables)
        optimizer.apply_gradients(zip(grads, trainable_variables))

        # Compute average loss
        avg_cost += cost / total_batch

    if (epoch + 1) % 10 == 0:

        print(f"Epoch {epoch+1}, Cost: {avg_cost}")

print("Optimization Finished!")

# Test model
pred = model(test_features)
correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(test_labels, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print("Accuracy:", accuracy.numpy())

















